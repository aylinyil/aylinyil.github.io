{"version":3,"sources":["Components/Square.js","Game.js","utilities/helper.js","reportWebVitals.js","index.js"],"names":["Square","className","onClick","props","passedFunction","this","value","React","Component","Game","restartGame","setState","squares","numberOfLeftSteps","state","Array","fill","XIsNextPlayer","i","handleClick","slice","winner","lines","length","a","b","c","calculateWinner","SwalWinner","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","SwalDraw","close","dismiss","DismissReason","cancel","Grid","container","item","xs","squareId","renderSquare","FormControl","size","InputLabel","htmlFor","Input","readOnly","id","startAdornment","InputAdornment","position","Chip","variant","color","label","style","width","height","marginLeft","avatar","Avatar","Button","marginRight","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2db8644.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Square extends React.Component {\n\n    /*\n    Nur bei jedem Click auf einem Square, wird der Value auf X gesetzt.\n     */\n\n    render() {\n\n\n        return (\n            <div>\n                <button className=\"squares\"\n                        onClick={() => {\n                            this.props.passedFunction()\n                        }}>\n                    {this.props.value}\n                </button>\n            </div>\n\n        );\n    }\n}\n\nexport default Square;","import React from 'react';\nimport Square from \"./Components/Square\";\nimport {Avatar, Button, Chip, FormControl, Grid, Input, InputAdornment, InputLabel} from \"@material-ui/core\";\nimport SwalWinner from 'sweetalert2';\nimport SwalDraw from 'sweetalert2';\nimport {calculateWinner} from \"./utilities/helper\";\n\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(8).fill(null), //Das Board besteht aus 9 squares, die zu Beginn leer sind\n            XIsNextPlayer: true,\n            numberOfLeftSteps: 9,\n        };\n    }\n\n    renderSquare(i) {\n        this.handleClick(i)\n        return (\n            <Square\n                value={this.state.squares[i]}/> //Jeder Square hat nun einen eigenen Wert (X, O, null)\n        );\n    }\n\n    restartGame = () => {\n        this.setState({squares: [],});\n        this.setState({numberOfLeftSteps: 9});\n    };\n\n    handleClick(i) {\n        const squares = this.state.squares.slice(); //returned Elemente in Array als ein neues Array\n        //console.log(squares);\n        squares[i] = this.state.XIsNextPlayer ? '𝙓' : '𝙊';\n        this.setState({\n            squares: squares,\n            XIsNextPlayer: !this.state.XIsNextPlayer,\n            numberOfLeftSteps: this.state.numberOfLeftSteps - 1,\n        });\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n\n        if (winner) {\n            SwalWinner.fire({\n                title: 'Congratulations!',\n                text: 'Player ' + winner + ' won the game.',\n                icon: 'success',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Restart!'\n            }).then((result) => {\n                    if (result.isConfirmed) {\n                        this.restartGame();\n                        SwalDraw.close();\n                    } else if (result.dismiss === SwalWinner.DismissReason.cancel) {\n                    }\n                })\n        }\n\n    if (!winner && this.state.numberOfLeftSteps === 0) {\n        SwalDraw.fire({\n            title: 'Good luck next time.',\n            text: 'Draw. Nobody won the game.',\n            icon: 'error',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Try again!'\n        }).then((result) => {\n                if (result.isConfirmed) {\n                   this.restartGame();\n                   SwalDraw.close();\n                } else if (result.dismiss === SwalWinner.DismissReason.cancel) {\n                }\n            })\n    }\n\n\n    return(\n\n<div className=\"App\">\n<div className=\"board\">\n\n<Grid container>\n<Grid container item xs= {4}>\n<Square value={this.state.squares[0]} squareId={0}\n        passedFunction={() => {\n            this.renderSquare(0)\n        }}/>\n</Grid>\n\n<Grid container item xs={4}>\n    <Square value={this.state.squares[1]} squareId={1}\n            passedFunction={() => {\n                this.renderSquare(1)\n            }}/>\n</Grid>\n\n<Grid container item xs={4}>\n    <Square value={this.state.squares[2]} squareId={2}\n            passedFunction={() => {\n                this.renderSquare(2)\n            }}/>\n</Grid>\n\n</Grid>\n\n<Grid container>\n    <Grid container item xs={4}>\n        <Square value={this.state.squares[3]} squareId={3}\n                passedFunction={() => {\n                    this.renderSquare(3)\n                }}/>\n    </Grid>\n\n    <Grid container item xs={4}>\n        <Square value={this.state.squares[4]} squareId={4}\n                passedFunction={() => {\n                    this.renderSquare(4)\n                }}/>\n    </Grid>\n\n    <Grid container item xs={4}>\n        <Square value={this.state.squares[5]} squareId={5}\n                passedFunction={() => {\n                    this.renderSquare(5)\n                }}/>\n    </Grid>\n    <FormControl size={1}>\n        <InputLabel htmlFor=\"input-with-icon-adornment\">Moves left: </InputLabel>\n        <Input\n            readOnly={true}\n            id=\"input-with-moves-left\"\n            startAdornment={\n                <InputAdornment position=\"start\">\n                    {this.state.numberOfLeftSteps}\n                </InputAdornment>\n            }\n        />\n    </FormControl>\n</Grid>\n\n<Grid container>\n    <Grid container item xs={4}>\n        <Square value={this.state.squares[6]} squareId={6}\n                passedFunction={() => {\n                    this.renderSquare(6)\n                }}/>\n    </Grid>\n\n    <Grid container item xs={4}>\n        <Square value={this.state.squares[7]} squareId={7}\n                passedFunction={() => {\n                    this.renderSquare(7)\n                }}/>\n    </Grid>\n\n    <Grid container item xs={4}>\n        <Square value={this.state.squares[8]} squareId={8}\n                passedFunction={() => {\n                    this.renderSquare(8)\n                }}/>\n    </Grid>\n</Grid>\n<Chip variant=\"outlined\" color=\"primary\" label=\"is the next player\"\n      style={{width: '50%', height: '10%', marginLeft: '1%'}}\n      avatar={<Avatar>{this.state.XIsNextPlayer ? 'X' : 'O'}</Avatar>}/>\n<Button size=\"small\" color=\"primary\" variant=\"contained\" style={{marginRight: '90%', marginLeft: '60%', marginTop: '-20%'}}\n        onClick={this.restartGame}> Restart </Button>\n</div>\n</div>\n\n\n)};\n}\n\nexport default Game;","export function calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Game/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(\n//console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}